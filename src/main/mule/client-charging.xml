<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="c94e7d32-4cdf-4c4d-87db-9d380e578882" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<http:request-config name="HTTP_Request_configuration" doc:name="HTTP Request configuration" doc:id="020fca61-cf82-4d0f-81db-1f26d19d482a" basePath="/books/v3" >
		<http:request-connection host="www.zohoapis.in" />
	</http:request-config>
	<db:config name="Database_Config" doc:name="Database Config" doc:id="5e789387-5165-4936-8e3b-0f3685e6fc95" >
		<db:my-sql-connection host="localhost" port="3306" user="root" password="root" database="sys" />
	</db:config>
	<flow name="cron-triggered-flow">
    <scheduler doc:name="Scheduler" doc:id="574d36d8-f26e-4612-a4b9-d1f4dd7fcd89" >
			<scheduling-strategy >
				<cron expression="0 0 10 1/1 * ? *"/>
			</scheduling-strategy>
		</scheduler>
		<logger level="INFO" doc:name="Logger" doc:id="5366fae3-9fad-4b48-be3f-a99bf4674cfe" message="job startted"/>
		<flow-ref name="client_chargingFlow" />
</flow>

	<flow name="client_chargingFlow" doc:id="7d6b2129-a869-4b3a-b5a5-d2eee1271da4" >
	
	<http:listener doc:name="Listener" doc:id="caf23c90-02e8-4d43-9331-23c33587211f" config-ref="HTTP_Listener_config" path="/getinvoices"/>
      	<http:request method="GET" doc:name="get invoice" doc:id="ff785247-f21d-4349-838e-22f4e9beefee" config-ref="HTTP_Request_configuration" path="/invoices" sendBodyMode="ALWAYS">
			<http:headers ><![CDATA[#[output application/java
---
{
	"Authorization" : "Zoho-oauthtoken 1000.18e08e370487477fc70ec4be8a25f171.841be6a3515904c2f12a0954e5b97bf6"
}]]]></http:headers>
			<http:query-params ><![CDATA[#[output application/java
---
{
	"cf_invoice_status" : "unpaid"
}]]]></http:query-params>
		</http:request>
		<ee:transform doc:name="Transform Message" doc:id="fbe4b07f-3892-4bf0-a760-05c4134e12d3">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload.invoices map ((invoice) -> {
    customer_id: invoice.customer_id,
    amount:invoice.total,
    invoice_id:invoice.invoice_id,
    to_acc_no:invoice.cf_to_acc_no
})]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<foreach doc:name="For Each" doc:id="eca9aaf9-5715-431c-9df1-ca2c9a2013ac" collection="#[payload]">
			<set-variable variableName="toAccNumberData" value="#[payload.to_acc_no]" doc:name="sender account number"/>
			<set-variable variableName="amountData" value="#[payload.amount]" doc:name="Amount Variable"/>
			<set-variable variableName="customerIdData" value="#[payload.customer_id]" doc:name="Customer Id Variable"/>
			<set-variable variableName="invoiceIdData" value="#[payload.invoice_id]" doc:name="Invoice Id Variable"/>
			<db:select doc:name="get customer record" doc:id="5439088f-d25c-43f2-b6bb-6b1be8d6d1cd" config-ref="Database_Config">
			<db:sql><![CDATA[SELECT 
    cc_customers.*,
    cc_customers_bank_details.acc_balance,
    cc_controller_bank.id as controller_bank_id
FROM 
    cc_customers
LEFT JOIN 
    cc_customers_bank_details ON cc_customers.bank_acc_no = cc_customers_bank_details.id and cc_customers_bank_details.status = 'ACTIVE'
LEFT JOIN
	cc_controller_bank on cc_controller_bank.acc_no = :BankAccountNumber and cc_controller_bank.status = 'ACTIVE'
WHERE 
    cc_customers.id = :customerId AND cc_customers.status = 'ACTIVE']]></db:sql>
			<db:input-parameters><![CDATA[#[{'customerId':payload.customer_id,
'BankAccountNumber':payload.to_acc_no
}]]]></db:input-parameters>
		</db:select>
			<ee:transform doc:name="Transform Message" doc:id="b96f5569-8ac1-4254-90a3-b322d10a68a5">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
(payload map ((item) -> item ++ {"amount": vars.amountData}))[0]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-variable value="#[payload.bank_acc_no]" doc:name="Set customer account no" doc:id="870eba18-3c24-4196-8ac2-cc766d1fdedc" variableName="customerAccountNumData"/>
			<choice doc:name="Condition">
				<when expression="#[payload != null and payload.acc_balance != null and payload.amount != null and payload.controller_bank_id != null and payload.acc_balance as Number > payload.amount as Number]">
					<db:update doc:name="Update Bank Account Balance" doc:id="be2b212b-fcaa-4126-a923-f6517a7be6fb" config-ref="Database_Config">
                        <db:sql><![CDATA[UPDATE cc_customers_bank_details SET acc_balance = acc_balance - :amount WHERE id = :bank_acc_no]]></db:sql>
                        <db:input-parameters><![CDATA[#[{'amount': payload.amount, 'bank_acc_no': payload.bank_acc_no}]]]></db:input-parameters>
                    </db:update>
					<db:insert doc:name="Create debited transaction log" doc:id="c610a630-d48c-491e-ac12-6b79aa759e15" config-ref="Database_Config">
						<db:sql ><![CDATA[INSERT INTO cc_transaction_logs (from_acc, to_acc, trans_type, amount, acc_no, invoice_id, status, created_by, updated_by)
VALUES (:from_acc, :to_acc, :trans_type, :amount, :acc_no, :invoice_id, 'ACTIVE', 'SYSTEM', 'SYSTEM');
]]></db:sql>
						<db:input-parameters ><![CDATA[#[{'from_acc':vars.customerAccountNumData,
	'to_acc':vars.toAccNumberData,
	'trans_type':'DEBITED',
	'amount':vars.amountData,
	'acc_no':vars.customerAccountNumData,
	'invoice_id':vars.invoiceIdData
}]]]></db:input-parameters>
					</db:insert>
					<db:update doc:name="Update in controller bank" doc:id="0769bf05-3caf-4b7c-acb7-5ff70bcc27f8" config-ref="Database_Config">
						<db:sql ><![CDATA[update cc_controller_bank SET acc_balance = acc_balance + :amount WHERE acc_no = :accountNumber]]></db:sql>
						<db:input-parameters ><![CDATA[#[{'amount':vars.amountData,
	'accountNumber':vars.toAccNumberData
}]]]></db:input-parameters>
					</db:update>
					<db:insert doc:name="Create credited transaction log" doc:id="c610a630-d48c-491e-ac12-6b79aa759e15" config-ref="Database_Config">
						<db:sql ><![CDATA[INSERT INTO cc_transaction_logs (from_acc, to_acc, trans_type, amount, acc_no, invoice_id, status, created_by, updated_by)
VALUES (:from_acc, :to_acc, :trans_type, :amount, :acc_no, :invoice_id, 'ACTIVE', 'SYSTEM', 'SYSTEM');
]]></db:sql>
						<db:input-parameters ><![CDATA[#[{'from_acc':vars.customerAccountNumData,
	'to_acc':vars.toAccNumberData,
	'trans_type':'CREDITED',
	'amount':vars.amountData,
	'acc_no':vars.toAccNumberData,
	'invoice_id':vars.invoiceIdData
}]]]></db:input-parameters>
					</db:insert>
					<set-payload value="#[{'invoice_id':vars.invoiceIdData,&#10;'customer_id': vars.customerIdData,&#10; 'status':'Updated'}]" doc:name="Set updated Payload"/>
                </when>
                <otherwise>
					<set-payload value="#[if(payload == null) 
{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'No account for the customer'} 
else if(payload != null and payload.acc_balance == null) 
{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'No bank account for the customer'}
else if(payload != null and payload.controller_bank_id == null) 
{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'Sender Account is invalid'}
else if(payload != null and payload.acc_balance != null and payload.amount != null and payload.acc_balance as Number &lt; payload.amount as Number) 
{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'Not updated due to insufficient balance'} 
else 
{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'Not updated due to technical issue'}]" doc:name="Not updated Payload"/>
                </otherwise>
            </choice>
		 <set-variable variableName="customerData" value="#[if (vars.customerData != null) (vars.customerData default []) ++ [payload] else [payload]]" />
		</foreach>
		<set-payload value="#[%dw 2.0&#10;output application/json&#10;---&#10;if (vars.customerData != null) vars.customerData else { 'message': 'No records found' }]" />
	</flow>
</mule>
