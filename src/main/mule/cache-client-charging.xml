<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
	<http:listener-config name="HTTP_Listener_config1" doc:name="HTTP Listener config" doc:id="530e102f-cacb-416c-bd23-ff1569d1d397" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
		<os:object-store name="Object_store" doc:name="Object store" doc:id="6f022562-df8d-4e32-a116-90068eee8829" entryTtl="5000000" expirationInterval="3" />
	
<ee:object-store-caching-strategy name="Caching_Strategy" doc:name="Caching Strategy" doc:id="a3745e35-8239-4c92-a92e-441432fc7a24" entryTTL="5000000" synchronized="false" keyGenerationExpression="#['cacheKey']" objectStore="Object_store"/>
  
	<ee:object-store-caching-strategy name="Caching_Strategy1" doc:name="Caching Strategy" doc:id="7d993003-aec0-4a1a-a2cf-4c3def04fced" keyGenerationExpression="#['refreshCacheKey']" objectStore="Object_store"/>
	<db:config name="Database_Config1" doc:name="Database Config" doc:id="af9ba5bb-3bd2-4472-b0fc-5ccf9094444d" >
		<db:my-sql-connection host="localhost" port="3306" user="root" password="root" database="client-charging" />
	</db:config>
	<http:request-config name="HTTP_Request_configuration1" doc:name="HTTP Request configuration" doc:id="47824da9-94d4-4650-bada-e455b8c18cda" basePath="/books/v3" >
		<http:request-connection host="www.zohoapis.in" protocol="HTTPS"/>
	</http:request-config>
	<http:request-config name="HTTP_Request_configuration2" doc:name="HTTP Request configuration" doc:id="6238b11e-836a-41f5-bdef-d8f657d0d8c6" basePath="/oauth/v2" >
		<http:request-connection protocol="HTTPS" host="accounts.zoho.in" />
	</http:request-config>
	<os:config name="ObjectStore_Config" doc:name="ObjectStore Config" doc:id="03f9eee5-eaa6-487c-a3c7-eaf1a819f96c" />
	<ee:object-store-caching-strategy name="final_Caching_Strategy" doc:name="Caching Strategy" doc:id="3bbc78f0-97fb-4cb0-b4fb-55949d32dc10" keyGenerationExpression="#['code']" >
		<os:private-object-store entryTtl="3300" config-ref="ObjectStore_Config" />
	</ee:object-store-caching-strategy>
	<ee:object-store-caching-strategy name="final_access_Caching_Strategy" doc:name="Caching Strategy" doc:id="6482de37-b04e-4ac8-927a-feb5e8fba6aa" keyGenerationExpression="#['access']" >
		<os:private-object-store entryTtl="3300" config-ref="ObjectStore_Config" />
	</ee:object-store-caching-strategy>
	<flow name="Scheduler-flow" doc:id="10b0f6b5-3029-442e-ab35-de50d0bc59c5" >
		<scheduler doc:name="Scheduler" doc:id="d4b8cdbf-4b28-4ea0-8360-a7239546ebab" >
			<scheduling-strategy >
				<cron expression="0 19 13 1/1 * ? *"/>
			</scheduling-strategy>
		</scheduler>
		<flow-ref doc:name="Call - final-cache-client-chargingFlow" doc:id="968c2752-2956-4e97-adfc-83ecc1575027" name="final-cache-client-chargingFlow"/>
	</flow>
	<flow name="final-cache-client-chargingFlow" doc:id="cfb9920e-aa63-4c1e-9fa5-2b0a98b02c9f" >
		<http:listener doc:name="Listener" doc:id="dbdae568-44a1-4eb3-bd5b-182e43afbdb0" config-ref="HTTP_Listener_config1" path="/getinvoice"/>
		<ee:cache doc:name="Cache" doc:id="6808898d-c23c-4107-a06a-3d103a3ee038" cachingStrategy-ref="final_Caching_Strategy">
			<http:request method="POST" doc:name="Request authorization code" doc:id="e419b51d-c5ec-4e37-addb-07d04dbf047f" url="https://api-console.zoho.in/oauthapi/v1/selfclient/1000.Q999RRE0B0S030JTFRT2IQL17S6XTS/granttoken" >
				<http:body ><![CDATA[#[output application/json
    ---
    {
    "granttoken": {
        "scope": [
            "ZohoBooks.fullaccess.all"
        ],
        "expiry": 10,
        "description": "test"
    }
}]]]></http:body>
				<http:headers ><![CDATA[#[output application/java
    ---
    {
    "Cookie":"zohocares-_uuid=f3b62a75-5f90-47da-835d-af2fa7416835_d266; zohocares-_zldp=YfEOFpfOAG%2B4Ou1uL02sxm0d3Ln5rcdQ%2F8XG%2B76QFfUSCrpukMK1vcTG2E%2F6UClmTPnJ%2FBYY4Go%3D; _iamadt=fef647af07abcc9c17e15222dec7ba489aa24abec28b5004f38886ddf73ae2b823dfb682bc949d0eed374527fca11f91815a687567356dd3c45d9a5c70189532; _iambdt=35c1409da64f5a5704c9fd39f7f62a7cabfa2cc537a9ef15947ce89bf7388a42fdf9b6c61c040488f1f6ac5b27db9bf5cc2dc40793a1d07dd13ed75a10f33b47; zohocares-_zldt=879f414f-e11d-42b4-8cab-88dd9ecf6d1b-2; wms-tkp-token=60029138469-df957a20-9ae61367b88f054b91d717cb63461bb3; 5817893107=776a78801cb78975a802433848e67bfc; iamcsr=be484038e6143b0e31642c25bb58eafdd19239e6c2681da0c87a157f654086df6e558e4955b68b26310fb9790bbaf44a446610f2dcf7fb39891aa82d3f5f6fbd; _zcsr_tmp=be484038e6143b0e31642c25bb58eafdd19239e6c2681da0c87a157f654086df6e558e4955b68b26310fb9790bbaf44a446610f2dcf7fb39891aa82d3f5f6fbd; ZohoMarkRef=\"https://www.zoho.com/accounts/protocol/oauth.html\"; ZohoMarkSrc=\"google:zoho|google:accounts|google:marketplace\"; cookie-uid=\"282f6078-ac05-4418-8c4d-5c7b7090f4bc_d221\"; JSESSIONID=6AA6E496984EA36B7AE78E8E1BB4AB9C",
    "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
    "X-ZCSRF-TOKEN":"iamcsrcoo=be484038e6143b0e31642c25bb58eafdd19239e6c2681da0c87a157f654086df6e558e4955b68b26310fb9790bbaf44a446610f2dcf7fb39891aa82d3f5f6fbd"
}]]]></http:headers>
			</http:request>
			<ee:transform doc:name="Transform Response" doc:id="f61f63a0-8531-4e0a-bd5a-37dfb4000f0f" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
    "granttoken": payload.granttoken.Grant_token
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
		</ee:cache>
		<set-variable value="#[payload.granttoken]" doc:name="Set Grant token" doc:id="2a7719af-41c8-4f4c-934b-f3f0efa10b47" variableName="granttoken" />
		<ee:cache doc:name="Cache" doc:id="21887dac-823e-4a32-aed7-8a240d8e8036" cachingStrategy-ref="final_access_Caching_Strategy">
			<http:request method="POST" doc:name="Request access token" doc:id="c479199d-93d5-4d68-a40f-a5af6872f1d2" config-ref="HTTP_Request_configuration2" path="/token" >
				<http:query-params ><![CDATA[#[output application/java
---
{
	"redirect_uri" : "https://www.google.com/",
	"client_secret" : "5ac54699bf8565c6eeed8897a44f2ae8a3ee8c99b3",
	"code" : vars.grantToken,
	"grant_type" : "authorization_code",
	"client_id" : "1000.Q999RRE0B0S030JTFRT2IQL17S6XTS"
}]]]></http:query-params>
			</http:request>
			<ee:transform doc:name="Transform Message" doc:id="64ca9b2a-885c-4556-ac5e-eb6c7018cefd" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
		</ee:cache>
		<flow-ref doc:name="call-get-invoice Flow" doc:id="a9ea7e2e-10d8-4b79-917e-01da80f2d41a" name="call-get-invoice" />
	</flow>
	<flow name="call-get-invoice" doc:id="1b8a60d2-1e2f-4a15-9fd5-02665eebc5ad" >
		<http:request method="GET" doc:name="get invoice" doc:id="2c753ea5-d1aa-4b96-b1f9-dbd4b9a4d75a" config-ref="HTTP_Request_configuration1" path="/invoices" sendBodyMode="ALWAYS">
			<http:headers><![CDATA[#[output application/java
---
{
	"Authorization" : "Zoho-oauthtoken " ++ payload.access_token
}]]]></http:headers>
			<http:query-params><![CDATA[#[output application/java
---
{
	"cf_invoice_status" : "unpaid"
}]]]></http:query-params>
		</http:request>
		<ee:transform doc:name="Transform Message" doc:id="d8c42cd3-05c6-4a43-9ab8-f3a7e6f8ec52" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload.invoices map ((invoice) -> {
    customer_id: invoice.customer_id,
    amount:invoice.total,
    invoice_id:invoice.invoice_id,
    to_acc_no:invoice.cf_to_acc_no
})]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<foreach doc:name="For Each" doc:id="4c138484-3c5d-4ae4-87ba-223798362bc4" collection="#[payload]" >
			<set-variable value="#[payload.to_acc_no]" doc:name="sender account number" doc:id="a81451c5-4e35-4436-84ed-c974d94f0145" variableName="toAccNumberData" />
			<set-variable value="#[payload.amount]" doc:name="Amount Variable" doc:id="d0ad7328-acc9-420f-8622-11c85a5eddea" variableName="amountData" />
			<set-variable value="#[payload.customer_id]" doc:name="Customer Id Variable" doc:id="1aae1fb2-b6fa-4766-87a4-d645deae43f7" variableName="customerIdData" />
			<set-variable value="#[payload.invoice_id]" doc:name="Invoice Id Variable" doc:id="da356cb3-1775-435b-8637-fea5ac705e29" variableName="invoiceIdData" />
			 <!-- Check for duplicate invoice records -->
        <db:select doc:name="Check duplicate invoice record" doc:id="efe14e85-9f30-4b55-bc6e-7de438133130" config-ref="Database_Config1">
            <db:sql><![CDATA[SELECT * FROM cc_transaction_logs WHERE invoice_id = :invoiceId]]></db:sql>
            <db:input-parameters><![CDATA[#[{'invoiceId': vars.invoiceIdData}]]]></db:input-parameters>
        </db:select>
        <choice doc:name="Check if invoice record exists" doc:id="3070c1cf-71a9-446b-a85e-de24a8bcf93d">
            <!-- Handle if invoice record already exists -->
            <when expression="#[payload != null and not isEmpty(payload)]">
              <set-payload value="#[{'invoice_id':vars.invoiceIdData,'customer_id':vars.customerIdData, 'status': 'The invoice is already processed.'}]" doc:name="Set already updated Payload" doc:id="27754d72-fbde-461f-a0ea-774f777a4dd5" />   
            </when>
            <otherwise>
			<db:select doc:name="get customer record" doc:id="42431076-d4f0-485f-a3bb-1ca89356b3c0" config-ref="Database_Config1" >
				<db:sql ><![CDATA[SELECT 
    cc_customers.*,
    cc_customers_bank_details.acc_balance,
    cc_controller_bank.id as controller_bank_id
FROM 
    cc_customers
LEFT JOIN 
    cc_customers_bank_details ON cc_customers.bank_acc_no = cc_customers_bank_details.id and cc_customers_bank_details.status = 'ACTIVE'
LEFT JOIN
	cc_controller_bank on cc_controller_bank.acc_no = :BankAccountNumber and cc_controller_bank.status = 'ACTIVE'
WHERE 
    cc_customers.id = :customerId AND cc_customers.status = 'ACTIVE']]></db:sql>
				<db:input-parameters ><![CDATA[#[{'customerId':vars.customerIdData,
'BankAccountNumber':vars.toAccNumberData
}]]]></db:input-parameters>
			</db:select>
			<ee:transform doc:name="Transform Message" doc:id="493b41de-a0bb-4e88-8a8a-b461c90f1caf" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
(payload map ((item) -> item ++ {"amount": vars.amountData}))[0]]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<set-variable value="#[payload.bank_acc_no]" doc:name="Set customer account no" doc:id="9dabd77e-0c9b-404d-8a9b-3dae24872cd4" variableName="customerAccountNumData" />
			<choice doc:name="Condition" doc:id="504dc259-6309-4361-b9dd-de8415d14c6d" >
				<when expression="#[payload != null and payload.acc_balance != null and payload.amount != null and payload.controller_bank_id != null and payload.acc_balance as Number &gt; payload.amount as Number]" >
					<db:update doc:name="Update Bank Account Balance" doc:id="1db24106-caf9-4d99-aa0a-325b6e2193eb" config-ref="Database_Config1" >
						<db:sql ><![CDATA[UPDATE cc_customers_bank_details SET acc_balance = acc_balance - :amount WHERE id = :bank_acc_no]]></db:sql>
						<db:input-parameters ><![CDATA[#[{'amount': payload.amount, 'bank_acc_no': payload.bank_acc_no}]]]></db:input-parameters>
					</db:update>
					<db:insert doc:name="Create debited transaction log" doc:id="0231c8df-3bc7-403e-b32a-4c0d658b16ca" config-ref="Database_Config1" >
						<db:sql ><![CDATA[INSERT INTO cc_transaction_logs (from_acc, to_acc, trans_type, amount, acc_no, invoice_id, status, created_by, updated_by)
VALUES (:from_acc, :to_acc, :trans_type, :amount, :acc_no, :invoice_id, 'ACTIVE', 'SYSTEM', 'SYSTEM');
]]></db:sql>
						<db:input-parameters ><![CDATA[#[{'from_acc':vars.customerAccountNumData,
	'to_acc':vars.toAccNumberData,
	'trans_type':'DEBITED',
	'amount':vars.amountData,
	'acc_no':vars.customerAccountNumData,
	'invoice_id':vars.invoiceIdData
}]]]></db:input-parameters>
					</db:insert>
					<db:update doc:name="Update in controller bank" doc:id="6376cf7c-a146-4923-ac4a-a6249bc87454" config-ref="Database_Config1" >
						<db:sql ><![CDATA[update cc_controller_bank SET acc_balance = acc_balance + :amount WHERE acc_no = :accountNumber]]></db:sql>
						<db:input-parameters ><![CDATA[#[{'amount':vars.amountData,
	'accountNumber':vars.toAccNumberData
}]]]></db:input-parameters>
					</db:update>
					<db:insert doc:name="Create credited transaction log" doc:id="6968f54e-1fea-4d4d-af79-c091060aaf6d" config-ref="Database_Config1" >
						<db:sql ><![CDATA[INSERT INTO cc_transaction_logs (from_acc, to_acc, trans_type, amount, acc_no, invoice_id, status, created_by, updated_by)
VALUES (:from_acc, :to_acc, :trans_type, :amount, :acc_no, :invoice_id, 'ACTIVE', 'SYSTEM', 'SYSTEM');
]]></db:sql>
						<db:input-parameters ><![CDATA[#[{'from_acc':vars.customerAccountNumData,
	'to_acc':vars.toAccNumberData,
	'trans_type':'CREDITED',
	'amount':vars.amountData,
	'acc_no':vars.toAccNumberData,
	'invoice_id':vars.invoiceIdData
}]]]></db:input-parameters>
					</db:insert>
					<set-payload value="#[{'invoice_id':vars.invoiceIdData,&#10;'customer_id': vars.customerIdData,&#10; 'status':'Updated'}]" doc:name="Set updated Payload" doc:id="b77e0f7a-693e-4644-aaa2-24c30a186c67" />
				</when>
				<otherwise >
					<set-payload value="#[if(payload == null) &#10;{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'No account for the customer'} &#10;else if(payload != null and payload.acc_balance == null) &#10;{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'No bank account for the customer'}&#10;else if(payload != null and payload.controller_bank_id == null) &#10;{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'Sender Account is invalid'}&#10;else if(payload != null and payload.acc_balance != null and payload.amount != null and payload.acc_balance as Number &lt; payload.amount as Number) &#10;{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'Not updated due to insufficient balance'} &#10;else &#10;{'invoice_id':vars.invoiceIdData,'customer_id': vars.customerIdData, 'status':'Not updated due to technical issue'}]" doc:name="Not updated Payload" doc:id="8189c998-040e-4337-b2b1-dcdfbd7ea341" />
				</otherwise>
			</choice>
			</otherwise>
			</choice>
			<set-variable value="#[if (vars.customerData != null) (vars.customerData default []) ++ [payload] else [payload]]" doc:name="Set Variable" doc:id="6a51c539-37e4-4106-8b3e-fddfaa5ac144" variableName="customerData" />
		</foreach>
		<logger level="INFO" doc:name="Logger" doc:id="4d11cd35-2aaf-470d-81a4-ab11677b587f" message="Result : #[vars.customerData]" />
		<set-payload value="#[%dw 2.0&#10;output application/json&#10;---&#10;if (vars.customerData != null) vars.customerData else { 'message': 'No records found' }]" doc:name="Set Payload" doc:id="7b52382e-833f-4d28-9c04-88da98ce5d50" />
	</flow>
</mule>
